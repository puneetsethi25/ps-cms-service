AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Curaconnect Strapi CMS service.

Parameters:
  ECRImageURI:
    Type: String
    Description: The URI of the Docker image in ECR

Resources:
  StrapiVPCId:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  StrapiSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StrapiVPCId
      CidrBlock: 10.0.1.0/24

  StrapiInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref StrapiVPCId
      InternetGatewayId: !Ref StrapiInternetGateway

  StrapiRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StrapiVPCId

  StrapiRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref StrapiRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref StrapiInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref StrapiSubnet
      RouteTableId: !Ref StrapiRouteTable
      
  CmsStrapiEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for CMS strapi
      VpcId: !Ref StrapiVPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: strapi-cms-service
          Image: !Ref ECRImageURI
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: NODE_ENV
              Value: development
            - Name: PORT
              Value: 80
            - Name: APP_KEYS
              Value: tobemodified1,tobemodified2,tobemodified3
            - Name: API_TOKEN_SALT
              Value: tobemodified
            - Name: ADMIN_JWT_SECRET
              Value: tobemodified
            - Name: TRANSFER_TOKEN_SALT
              Value: tobemodified
            - Name: JWT_SECRET
              Value: tobemodified
            - Name: DATABASE_CLIENT
              Value: postgres
            - Name: DATABASE_PORT
              Value: 5432
            - Name: DATABASE_SSL
              Value: false              
            - Name: DATABASE_HOST
              Value: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CMSDatabaseHost'
            - Name: DATABASE_NAME
              Value: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CMSDatabaseName'
            - Name: DATABASE_USERNAME
              Value: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CMSDatabaseUsername'
            - Name: DATABASE_PASSWORD
              Value: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CMSDatabasePwd'
            - Name: AWS_ACCESS_KEY_ID
              Value: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CMSAwsAccessKeyId'
            - Name: AWS_ACCESS_SECRET
              Value: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CMSAwsAccessSecret'
            - Name: AWS_REGION
              Value: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CMSRegion'
            - Name: AWS_BUCKET
              Value: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CMSAwsBucket'
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Family: strapi-cms-app
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
  StrapiEcsCluster:
    Type: 'AWS::ECS::Cluster'
  StrapiCMSECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref StrapiEcsCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: 
            - !Ref StrapiSubnet
          SecurityGroups:
            - !GetAtt CmsStrapiEcsSecurityGroup.GroupId
  ExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AccessECR
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                Resource: '*'
        - PolicyName: AccessParameterStore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource: '*' 
  CloudWatchLogsGroup:  
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ps-cms-ecs-strapi
      RetentionInDays: 14